package nc.ui.pu.qst.newoaspwh.action;

import java.awt.event.ActionEvent;

import java.util.Arrays;
import nc.bs.pubapp.pf.util.ApproveFlowUtil;
//import nc.bs.uif2.IActionCode;
import nc.md.data.access.NCObject;
import nc.md.persist.framework.MDPersistenceService;
import nc.ui.ls.MessageBox;
import nc.ui.pu.qst.newoaspwh.ace.serviceproxy.AceNewoaspwhMaintainProxy;
import nc.ui.pu.qst.newoaspwh.websrv.ALLDATAINFO;
import nc.ui.pu.qst.newoaspwh.websrv.APPROVEFLOWINFO;
import nc.ui.pu.qst.newoaspwh.websrv.GMCGFAOA;
import nc.ui.pu.qst.newoaspwh.websrv.GMCGFAOA_Service;
import nc.ui.pubapp.uif2app.view.ShowUpableBillForm;
import nc.vo.pu.qst.newoaspwh.AggNewoaspwhaHeadVO;
import nc.vo.pu.qst.newoaspwh.NewoaspwhaHeadVO;
import nc.vo.pu.qst.newoaspwh.NewoaspwhbBodyVO;
import nc.vo.pub.pf.BillStatusEnum;
import nc.vo.pub.VOStatus;
import nc.ui.pubapp.uif2app.query2.model.ModelDataManager;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.JLabel;

import nc.ui.pub.beans.UIButton;
import nc.ui.pub.beans.UIDialog;
import nc.ui.pub.beans.UITextField;
import nc.ui.pubapp.uif2app.model.BillManageModel;
import nc.ui.uif2.ShowStatusBarMsgUtil;

//public class SendToOaAction extends NCAction {
public class SendToOaAction extends nc.ui.uif2.actions.EditAction {
	private ModelDataManager dataManager;
	
	private ShowUpableBillForm editor;
	
	private BillManageModel mymodel;
	
	public SendToOaAction() {
		super();
	}
	@Override
	public void doAction(ActionEvent e) throws Exception {
		// TODO 取界面数据信息进行组装
		//0.弹出方案号和方案名称录入界面
		mymodel = (BillManageModel)getModel();
		JComponent parentWin = mymodel.getContext().getEntranceUI();
		//判断发起人是否为同一人
		Object[] objs = mymodel.getSelectedOperaDatas();
		if(!checkFqroa(objs)){
			MessageBox.showMessageDialog("错误提示", "发起人OA必须是同一人!");
			ShowStatusBarMsgUtil.showErrorMsg("错误提示", "发起人OA必须是同一人!", mymodel.getContext());
			return;
		}
		final UIDialog dia = new UIDialog(parentWin,"-方案信息-");
		dia.setSize(new Dimension(400,280));
		dia.setLocationRelativeTo(parentWin);
		final UITextField fah = new UITextField(30);
		final UITextField famc = new UITextField(30);
		fah.setBounds(90,20,150,30);
		famc.setBounds(90,60,100,30);
		JLabel lfah = new JLabel("方案号:");
		JLabel lfamc = new JLabel("方案名称:");
		lfah.setBounds(20,20,80,30);
		lfamc.setBounds(20,60,60,30);
		UIButton btn = new UIButton("确定");
//		btn.setBounds(10,130,40,20);
		btn.setSize(20, 20);
		btn.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO 自动生成的方法存根
				if(!"".equals(fah.getValue()) && null != fah.getValue()){
					try{
						//获取选中的AggVO
						Object[] object = mymodel.getSelectedOperaDatas();
						//构造需要更新的AggVO数组
						AggNewoaspwhaHeadVO[] avo = new AggNewoaspwhaHeadVO[object.length];
						/*HashMap<String, AggNewoaspwhaHeadVO> map = new HashMap<>();
						for (Object aggNewoaspwhaHeadVO : object) {
							AggNewoaspwhaHeadVO vo = (AggNewoaspwhaHeadVO) aggNewoaspwhaHeadVO;
							map.put(vo.getParentVO().getPrimaryKey(), vo);
						}*/
						/*IQueryScheme queryScheme = QuerySchemaUtil.createQuerySchemeByFullClassName("nc.vo.pu.qst.newoaspwh.NewoaspwhaHeadVO");
						FromWhereSQL whereSQL = queryScheme.getTableJoinFromWhereSQL();
						((FromWhereSQLImpl)whereSQL).setWhere(whereSQL.getWhere());*/
						
						/*NCObject[] ncObjects = MDPersistenceService.lookupPersistenceQueryService()
								.queryBillOfNCObjectByPKs(NewoaspwhaHeadVO.class, map.keySet().toArray(new String[]{}),null,false);*/
//						return;
						for(int i=0 ; i<object.length; i++){
							AggNewoaspwhaHeadVO agg = (AggNewoaspwhaHeadVO)object[i];
							//由于是懒加载-必须按主键重新查询数据库
							NCObject[] ncObjects = MDPersistenceService.lookupPersistenceQueryService().queryBillOfNCObjectByCond
									(NewoaspwhaHeadVO.class,"pk_id_a='"+ agg.getParent().getPrimaryKey() +"'",false);
							agg = (AggNewoaspwhaHeadVO)ncObjects[0].getContainmentObject();
							//设置记录状态为"提交"
							agg.getParent().setAttributeValue("approvestatus", BillStatusEnum.COMMIT.toIntValue());
							agg.getParent().setAttributeValue("spfah", fah.getValue().toString());
							agg.getParent().setAttributeValue("spfamc", famc.getValue().toString());
							agg.getParent().setStatus(VOStatus.UPDATED);
							agg.setChildrenVO(bodyVoDelDR((NewoaspwhbBodyVO[])agg.getChildrenVO()));
							avo[i] = agg;
						}
						//构造目的VO-推送到OA
						AggNewoaspwhaHeadVO oav = changeVos(avo);
						if(!"success".equals(sendToOa(oav))){
							MessageBox.showMessageDialog("OA推送失败", "对方服务不可用或者网络连接异常!");
							return;
						}
						//调用服务进行更新
						AceNewoaspwhMaintainProxy anm = new AceNewoaspwhMaintainProxy();
						anm.update(avo);
						MessageBox.showMessageDialog("提示", "OA审批流程信息推送成功!");
//						editor.setValue(avo);
						dataManager.refresh();
					}catch(Exception ex){
						ex.printStackTrace();
						MessageBox.showMessageDialog("失败", "推送失败!,错误明细:"+ ex.getMessage());
					}
					dia.setVisible(false);
					
				}else{
					MessageBox.showMessageDialog("提示", "请输入方案号!");
				}
			}
		});
		dia.setLayout(new FlowLayout());
		dia.add(lfah);
		dia.add(fah);
		dia.add(lfamc);
		dia.add(famc);
		dia.add(btn);
		dia.setVisible(true);
	}
	
	//按钮可用逻辑设置,多选时:判断是否有提交的记录
	@Override
	protected boolean isActionEnable() {
		/*setMymodel();
		boolean bb = false;
		if (mymodel.getSelectedOperaDatas() != null) {
			boolean b = true;
			Object[] object = mymodel.getSelectedOperaDatas();
			for(int i = 0; i<object.length;i++){
				Integer fstatusflag = ApproveFlowUtil.getBillStatus(NCObject.newInstance(object[i]));
				b = b && tryMakeFlow(fstatusflag);
			}
			bb = b;
		}
		return bb;*/
		return true;
	}
	
	//判断OA发起人是否为同一人
	public boolean checkFqroa(Object[] objs){
		if(objs.length == 1) return true;
		String baseFqr="";
		for(int i = 0; i<objs.length ; i++){
			if(i==0){
				baseFqr=((AggNewoaspwhaHeadVO)objs[i]).getParent().getAttributeValue("fqroah").toString();
			}else{
				if(!baseFqr.equals(((AggNewoaspwhaHeadVO)objs[i]).getParent().getAttributeValue("fqroah").toString())){
					return false;
				}
			}
		}
		return true;
	}
	
	//构造目的VO-推送给OA
	public AggNewoaspwhaHeadVO changeVos (AggNewoaspwhaHeadVO[] avos){
		AggNewoaspwhaHeadVO ao = new AggNewoaspwhaHeadVO();
		ao.setParent(avos[0].getParent());
		List<NewoaspwhbBodyVO> lb = new ArrayList<NewoaspwhbBodyVO>();
		for(int i = 0;i<avos.length;i++){
			NewoaspwhbBodyVO[] nb = (NewoaspwhbBodyVO[])avos[i].getChildrenVO();
			//根据额度重新设置审批人
			nb = changeSped(nb, Double.parseDouble(avos[i].getParent().getAttributeValue("sped").toString()));
			for(int j=0;j<nb.length;j++){
				lb = singleCpcj(lb, nb[j]);
			}
		}
		//对lb进行排序
		NewoaspwhbBodyVO[] lbv = lb.toArray(new NewoaspwhbBodyVO[lb.size()]);
		Arrays.sort(lbv, new Comparator<NewoaspwhbBodyVO>(){
			@Override
			public int compare(NewoaspwhbBodyVO paramT1,NewoaspwhbBodyVO paramT2) {
				Integer val = Integer.valueOf((String) paramT1.getAttributeValue("spcj"));
				Integer val2 = Integer.valueOf((String) paramT2.getAttributeValue("spcj"));
				return val.compareTo(val2);
			}});
		ao.setChildrenVO(lbv);
		return ao;
	}
	
	//核心-组装合并BodyVO
	public List<NewoaspwhbBodyVO> singleCpcj(List<NewoaspwhbBodyVO> lb,NewoaspwhbBodyVO bvo){
		boolean flag = false;
		List<NewoaspwhbBodyVO> lbb = new ArrayList<NewoaspwhbBodyVO>();
		for(NewoaspwhbBodyVO b : lb){
			String spcj = b.getAttributeValue("spcj").toString();
			if(spcj.equals(bvo.getAttributeValue("spcj").toString())){
				//如果不为null和空串
				if(null != b.getAttributeValue("sproah") && !"".equals(b.getAttributeValue("sproah").toString())){
					//如果不包含则拼接到后面
					if(b.getAttributeValue("sproah").toString().indexOf(bvo.getAttributeValue("sproah").toString()) == -1){
						b.setAttributeValue("sproah", b.getAttributeValue("sproah").toString() + ";" + bvo.getAttributeValue("sproah").toString());
					}
				}else{
					b.setAttributeValue("sproah", b.getAttributeValue("sproah").toString());
				}
				flag = true;
			}
			lbb.add(b);
		}
		if(!flag){
			lbb.add(bvo);
		}
		return lbb;
	} 
	
	//处理审批额度对应的OA审批人
	public NewoaspwhbBodyVO[] changeSped(NewoaspwhbBodyVO[] bvo,double sped){
		List<NewoaspwhbBodyVO> lbb = new ArrayList<NewoaspwhbBodyVO>();
		for(NewoaspwhbBodyVO b : bvo){
			//审批额度为空的不做处理
			if(null == b.getAttributeValue("sped") || Double.parseDouble(b.getAttributeValue("spedxx").toString())==0 || "".equals(b.getAttributeValue("sped").toString()) || "0".equals(b.getAttributeValue("sped").toString())){
				
			}else{
				double l0 =Double.parseDouble(b.getAttributeValue("spedxx").toString());
				double l1 =Double.parseDouble(b.getAttributeValue("sped").toString());
				//额度在该区间的不做处理
				if(l0 < sped && sped <= l1){
					
				}else{
					if(l1>sped){
						b.setAttributeValue("sproah", "");
					}
				}
			}
			lbb.add(b);
		}
		return lbb.toArray(new NewoaspwhbBodyVO[lbb.size()]);
	}
	
	//子vo清除DR=1的记录
	public NewoaspwhbBodyVO[] bodyVoDelDR(NewoaspwhbBodyVO[] bvo){
		List<NewoaspwhbBodyVO> l = new ArrayList<NewoaspwhbBodyVO>();
		for(NewoaspwhbBodyVO bv : bvo){
			if(!"1".equals(bv.getAttributeValue("dr").toString())){
				l.add(bv);
			}
		}
		return l.toArray(new NewoaspwhbBodyVO[l.size()]);
	}
	
	//发送OA
	public String sendToOa(AggNewoaspwhaHeadVO oav){
		GMCGFAOA_Service goas = new GMCGFAOA_Service();
		GMCGFAOA goa = goas.getDomino();
		ALLDATAINFO adf = new ALLDATAINFO();
		//根据审批类型，向OA系统内传递参数
		//审批类型：1-方案审批,2-价格审批,3-采购方案确认,4-采购信息确认,5-单一来源审批
		//计划类型：1-技改,2-技措,3-零固,4-大修,5-生产，6-维修
		//2017-05-04修改增加技改、技措的方案、价格审批流程参数
//		if((oav.getParent().getAttributeValue("splx").toString()).equals("2")){
//			adf.setGMTYPE("BBDB");//本部、鲅鱼圈价格审批
//		}else{
//			adf.setGMTYPE("GMLS");//本部、鲅鱼圈方案审批
//		}
		//采购价格审批
		if((oav.getParent().getAttributeValue("splx").toString()).equals("2")){
			//计划类型为技改、技措的价格审批向OA内传递JGJC，其他计划类型传递BBDB	
			if((oav.getParent().getAttributeValue("jhlx").toString()).equals("1") || (oav.getParent().getAttributeValue("jhlx").toString()).equals("2") ){
				adf.setGMTYPE("JGJC");//计划类型为技改、技措的价格审批	
			}else{
				adf.setGMTYPE("BBDB");//本部、鲅鱼圈价格审批
			}
		//采购方案审批
		}else if((oav.getParent().getAttributeValue("splx").toString()).equals("1")){
			//计划类型为技改、技措的方案审批向OA内传递JGJC，其他计划类型传递GMLS
			if((oav.getParent().getAttributeValue("jhlx").toString()).equals("1") || (oav.getParent().getAttributeValue("jhlx").toString()).equals("2") ){
				adf.setGMTYPE("JGJC");//计划类型为技改、技措的方案审批	
			}else{
				adf.setGMTYPE("GMLS");//本部、鲅鱼圈方案审批
			}
		}
		//
		adf.setGMPRONO(oav.getParent().getAttributeValue("spfah").toString());
		adf.setGMTITLE(oav.getParent().getAttributeValue("spfamc").toString());
		adf.setGMCREATER(oav.getParent().getAttributeValue("fqroah").toString());
		List<APPROVEFLOWINFO> list = adf.getAPPROVEFLOWINFOOBJ();
		for(NewoaspwhbBodyVO b:(NewoaspwhbBodyVO[])oav.getChildrenVO()){
			APPROVEFLOWINFO a = new APPROVEFLOWINFO();
			a.setGMSPLEV(Integer.parseInt((String)b.getAttributeValue("spcj")));
			a.setGMAPPER((String)b.getAttributeValue("sproah"));
			list.add(a);
		}
		return goa.process(adf);
	}
	
	protected boolean tryMakeFlow(Integer fstatusflag) {
		return fstatusflag == null || BillStatusEnum.FREE.equalsValue(fstatusflag);
	}
	
	public void setEditor(ShowUpableBillForm editor) {
		this.editor = editor;
	}
	
	public void setDataManager(ModelDataManager dataManager) {
		this.dataManager = dataManager;
	}
	public void setMymodel() {
		this.mymodel = (BillManageModel)getModel();
	}
	
	
}
