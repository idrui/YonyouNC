/**
 * 
 */
package nc.ui.pu.m20.action;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import nc.bs.framework.common.NCLocator;
import nc.itf.bd.material.assign.IMaterialAssignService;
import nc.itf.bd.material.baseinfo.IMaterialBaseInfoService;
import nc.itf.bd.material.measdoc.IMeasdocService;
import nc.itf.bd.material.stock.IMaterialStockService;
import nc.itf.uap.IUAPQueryBS;
import nc.itf.uap.pf.busiflow.PfButtonClickContext;
import nc.jdbc.framework.processor.ColumnListProcessor;
import nc.jdbc.framework.processor.ColumnProcessor;
import nc.md.model.MetaDataException;
import nc.md.persist.framework.IMDPersistenceQueryService;
import nc.md.persist.framework.MDPersistenceService;
import nc.pubitf.para.SysInitQuery;
import nc.ui.ml.NCLangRes;
import nc.ui.pub.pf.PfUtilClient;
import nc.ui.pubapp.uif2app.actions.AbstractReferenceAction;
import nc.ui.pubapp.uif2app.funcnode.trantype.TrantypeFuncUtils;
import nc.ui.pubapp.uif2app.view.ShowUpableBillForm;
import nc.ui.pubapp.uif2app.view.util.BillRowNoUtils;
import nc.ui.trade.business.HYPubBO_Client;
import nc.ui.uif2.model.BillManageModel;
import nc.vo.bd.material.MaterialVO;
import nc.vo.bd.material.cost.MaterialCostmodeVO;
import nc.vo.bd.material.marbasclass.MarBasClassVO;
import nc.vo.bd.material.measdoc.MeasdocVO;
import nc.vo.bd.material.stock.MaterialStockVO;
import nc.vo.lm.erpcgjhjk.ErpcgjhjkHVO;
import nc.vo.ml.AbstractNCLangRes;
import nc.vo.ml.NCLangRes4VoTransl;
import nc.vo.pu.m20.entity.PraybillHeaderVO;
import nc.vo.pu.m20.entity.PraybillItemVO;
import nc.vo.pu.m20.entity.PraybillVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.IAttributeMeta;
import nc.vo.pub.IColumnMeta;
import nc.vo.pub.IVOMeta;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.para.SysInitVO;
import nc.vo.pubapp.pattern.exception.ExceptionUtils;
import nc.vo.pubapp.pattern.model.meta.entity.bill.IBillMeta;
import nc.vo.pubapp.pattern.pub.SqlBuilder;
import nc.vo.trade.checkrule.VOChecker;

/**
 * @author 王梓懿
 * @version 2017年8月26日 下午2:23:31 参照股份增行,为保持一致性，先执行原来的业务（物料分配等），再做增行业务（本类的功能）
 */
public class AddFromDW66LineAction extends AbstractReferenceAction {

	private static final long serialVersionUID = -5194774980504670157L;

	private final String[] checkkey = new String[] { "PK_ORG" };

	private ShowUpableBillForm editor;

	private BillManageModel model;
	private String pk_group = "0001N610000000000IT0";// 组织，集团直接写死
	private String pk_org = "0001N610000000000IT0";

	public AddFromDW66LineAction() {
		super();
	}

	@Override
	public void doAction(ActionEvent e) throws Exception { 
		Object obj = this.editor.getValue();
		PraybillVO oldVO = (PraybillVO) obj;

		// 调用流程平台提供的公共转单方法
		// 打开处理上下游单据的处理
				PfUtilClient.childButtonClickedNew(this.createPfButtonClickContext());
		PraybillVO[] newvos = null;
		if (PfUtilClient.isCloseOK()) {
			// 处理之前的一些业务（对于物料的处理）
			this.processOldBussiness();

			newvos = (PraybillVO[]) PfUtilClient.getRetVos();
			if (VOChecker.isEmpty(newvos)) {
				return;
			}
			this.checkAddLineData(oldVO, newvos);
			this.addLine(newvos);
		}
	}

	/**
	 * 
	 */
	private void processOldBussiness() throws BusinessException {

		// TODO 自动生成的方法存根

		AggregatedValueObject[] srcVOs = PfUtilClient.getRetOldVos();
		List<String> maPkList = new ArrayList<String>();// 存新增的物料主键
		for (AggregatedValueObject aggvo : srcVOs) {
			ErpcgjhjkHVO hvo = (ErpcgjhjkHVO) aggvo.getParentVO();
			String wucode = hvo.getCode();// 物料编码
			// 判断物料是否存在
			if (!isHas(wucode)) {
				MaterialVO returnVO = insertMaterial(hvo, pk_org, pk_group);// 调用更新物料档案方法
				String pk = returnVO.getPk_material();
				maPkList.add(pk);
			}
		}
		if (maPkList != null && maPkList.size() > 0) {
			// 自动分配物料
			autoMaterialAssign(maPkList);

			// 自动启用成本信息批次核算
			autoEnableBatch(maPkList);

			// 自动启用库存信息批次管理
			autoEnableStock(maPkList);
		}

	}

	public ShowUpableBillForm getEditor() {
		return this.editor;
	}

	public BillManageModel getModel() {
		return this.model;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}

	public void setEditor(ShowUpableBillForm view) {
		this.editor = view;
	}

	public void setModel(BillManageModel model) {
		this.model = model;
		this.model.addAppEventListener(this);
	}

	private void addLine(PraybillVO[] newvos) {
		// 对拉单生成的vo进行处理
		PraybillItemVO[] bvos = null;
		for (int i = 0; i < newvos.length; i++) {
			bvos = (PraybillItemVO[]) newvos[i].getChildrenVO();
			// 获得当前界面的表体行数
			int row = this.getEditor().getBillCardPanel().getRowCount();

			for (int n = 0; n < bvos.length; n++) {
				// 自动增行
				this.getEditor().getBillCardPanel().addLine();
				// 设置行vo
				this.getEditor().getBillCardPanel().getBillModel()
						.setBodyRowVO(bvos[n], n + row);
				BillRowNoUtils.addLineRowNo(
						this.getEditor().getBillCardPanel(), "crowno");

			}
			this.getEditor().getBillCardPanel().getBillModel()
					.loadLoadRelationItemValue();
		}
	}

	private void checkAddLineData(PraybillVO oldvo, PraybillVO[] newvos) {
		PraybillHeaderVO oldhvo = (PraybillHeaderVO) oldvo.getParentVO();
		for (PraybillVO newvo : newvos) {

			PraybillHeaderVO newhvo = (PraybillHeaderVO) newvo.getParentVO();
			IBillMeta billmeta = oldvo.getMetaData();
			IVOMeta vometa = billmeta.getParent();
			List<String> errornames = new ArrayList<String>();
			for (String key : this.checkkey) {
				if (null == oldhvo.getAttributeValue(key)
						&& null == newhvo.getAttributeValue(key)) {
					continue;
				} else if (null == oldhvo.getAttributeValue(key)) {
					IAttributeMeta attri = vometa.getAttribute(key);
					errornames.add(attri.getColumn().getLabel());
				} else {
					if (!oldhvo.getAttributeValue(key).equals(
							newhvo.getAttributeValue(key))) {
						IAttributeMeta attri = vometa.getAttribute(key);
						IColumnMeta column = attri.getColumn();
						errornames.add(column.getLabel());
					}
				}

			}
			if (errornames.size() > 0) {
				Set<String> vbillcodes = new HashSet<String>();
				PraybillItemVO[] bvos = (PraybillItemVO[]) newvo
						.getChildrenVO();
				for (PraybillItemVO bvo : bvos) {
					// 来源单据编码
					vbillcodes.add((String) bvo
							.getAttributeValue("vsourcecode"));
				}
				StringBuffer buffer = new StringBuffer();
				for (String errorkey : errornames) {
					buffer.append(NCLangRes.getInstance().getStrByID(
							"4006002_0", "04006002-0027", null,
							new String[] { errorkey })/* {0}、 */);
				}

				StringBuffer billcodebuffer = new StringBuffer();
				for (String billcode : vbillcodes) {
					billcodebuffer.append(billcode + ",");
				}

				String billcodes = NCLangRes.getInstance().getStrByID(
						"4006002_0",
						"04006002-0028",
						null,
						new String[] { billcodebuffer.substring(0,
								billcodebuffer.length() - 1) })/* 【{0}】 */;
				String keyNames = NCLangRes.getInstance()
						.getStrByID(
								"4006002_0",
								"04006002-0028",
								null,
								new String[] { buffer.substring(0,
										buffer.length() - 1) })/* 【{0}】 */;
				ExceptionUtils.wrappBusinessException(NCLangRes.getInstance()
						.getStrByID("4006008_0", "04006008-0084", null,
								new String[] { billcodes, keyNames })/*
																	 * 单据号：{0
																	 * }以下字段 ：
																	 * {1}
																	 * 不同不允许参照增行
																	 */);
			} else {
				PraybillItemVO[] oldbvos = (PraybillItemVO[]) oldvo
						.getChildrenVO();
				PraybillItemVO[] newbvos = (PraybillItemVO[]) newvo
						.getChildrenVO();
				for (PraybillItemVO bvo : newbvos) {
					String srcbid = (String) bvo
							.getAttributeValue("csourcebid");
					if(srcbid==null){
						ExceptionUtils.wrappBusinessException("该张单据没有通过参照股份拉单的形式进行数据填充，暂时不支持导入数据后再进行参照增行操作");
					}
					for (PraybillItemVO obvo : oldbvos) {
						if (obvo.getAttributeValue("csourcebid").equals(srcbid)) {
							AbstractNCLangRes nclangres = NCLangRes4VoTransl
									.getNCLangRes();
							ExceptionUtils
									.wrappBusinessException(nclangres
											.getStrByID("4006008_0",
													"04006008-0009")/*
																	 * @res
																	 * "选择的数据已经在卡片上，参照增行失败"
																	 */);
						}
					}
				}
			}
		}
	}

	/**
	 * 判断物料是否存在
	 * 
	 * @throws BusinessException
	 */
	public Boolean isHas(String wucode) throws BusinessException {
		String sqlmact = "select count(pk_material) from bd_material where code ='"
				+ wucode + "' and nvl(dr,0)=0 ";// 物料档案
		int k = 0;
		k = (Integer) getQueryBS().executeQuery(sqlmact, new ColumnProcessor());
		if (k == 0) {
			return false;
		}
		return true;
	}

	public MaterialVO insertMaterial(ErpcgjhjkHVO srchvo, String pk_group,
			String pk_org) throws BusinessException {
		HYPubBO_Client bo = new HYPubBO_Client();
		IMaterialBaseInfoService maservice = NCLocator.getInstance().lookup(
				IMaterialBaseInfoService.class);
		MaterialVO maVO = new MaterialVO();
		maVO.setPk_group(pk_group);
		maVO.setPk_org(pk_org);
		// 默认成一般纳税商品，正式：未知
		maVO.setPk_mattaxes("1001Z01000000003W0WH");
		// 电子采购打钩
		maVO.setIselectrans(UFBoolean.FALSE);
		// 产品簇不打钩
		maVO.setProductfamily(UFBoolean.FALSE);
		// 电子销售不打钩
		maVO.setElectronicsale(UFBoolean.FALSE);
		// 适用零售不打钩
		maVO.setRetail(UFBoolean.FALSE);
		// 启用状态,已启用
		maVO.setEnablestate(2);
		// 入库容差
		maVO.setIntolerance(new UFDouble(0));
		// 入库容差
		maVO.setOuttolerance(new UFDouble(0));
		// 入库容差
		maVO.setOutcloselowerlimit(new UFDouble(0));
		// 物料名称
		maVO.setName(srchvo.getName());
		// 物料规格
		maVO.setMaterialspec(srchvo.getMaterialspec());// materialspec
		// 物料型号
		maVO.setMaterialtype(srchvo.getMaterialspec());
		// 物料分类
		String Pk_marbasclass = null;
		String code = this.getMarbasclasscode();// 物料分类编码
		MarBasClassVO[] classVO = (MarBasClassVO[]) bo.queryByCondition(
				MarBasClassVO.class, " code='" + code + "'");
		Pk_marbasclass = classVO[0].getPk_marbasclass();
		maVO.setPk_marbasclass(Pk_marbasclass);
		// 物料编码
		if (srchvo.getCode() == null || srchvo.getCode().trim().length() == 0) {
			// 设备系统没有物料编码，用单据号作为物料编码
			maVO.setCode(srchvo.getBillno());
		} else {
			// 物资系统
			maVO.setCode(srchvo.getCode());
		}
		// 物料单位
		MeasdocVO[] measdocVOs = (MeasdocVO[]) bo.queryByCondition(
		// MeasdocVO.class, " name='" + srchvo.getCastunitid() + "' and code='"
		// + srchvo.getCastunitid() + "'");
				MeasdocVO.class, " code='" + srchvo.getCastunitid() + "'");

		String pk_measdoc = null;
		if (measdocVOs != null && measdocVOs.length > 0) {
			pk_measdoc = measdocVOs[0].getPk_measdoc();
		} else {
			// 自动新增计量档案
			MeasdocVO measdocVO = new MeasdocVO();
			measdocVO.setCode(srchvo.getCastunitid());// 编码
			measdocVO.setName(srchvo.getCastunitid());// 名称
			measdocVO.setPk_group(pk_group);
			measdocVO.setPk_org("GLOBLE00000000000000");// 全局组织
			measdocVO.setOppdimen("E");// 所属量纲
			measdocVO.setBasecodeflag(UFBoolean.FALSE);// 是否为基本单位
			measdocVO.setBitnumber(4);// 小数位数
			IMeasdocService measdocSer = NCLocator.getInstance().lookup(
					IMeasdocService.class);
			measdocVO = measdocSer.insertMeasdocForPfxx(measdocVO);
			pk_measdoc = measdocVO.getPk_measdoc();
		}
		maVO.setPk_measdoc(pk_measdoc);
		// 特征件
		maVO.setIsfeature(UFBoolean.FALSE);
		// 成套件
		maVO.setSetpartsflag(UFBoolean.FALSE);
		// 服务类
		maVO.setFee(UFBoolean.FALSE);
		// 促销商品
		maVO.setIshproitems(UFBoolean.FALSE);
		// 折扣价格
		maVO.setDiscountflag(UFBoolean.FALSE);
		// 是否最新
		maVO.setLatest(UFBoolean.FALSE);
		// 自动追加辅计量单位
		// MaterialConvertVO conVO = new MaterialConvertVO();
		// // 计量单位同主计量
		// String main_measdocID = pk_measdoc;
		// conVO.setPk_measdoc(main_measdocID);
		// // 与主计量单位换算率为1/1
		// conVO.setMeasrate("1/1");
		// // 默认为固定换算
		// conVO.setFixedflag(UFBoolean.TRUE);
		// // 自动标记所有辅计量
		// conVO.setIsprodmeasdoc(UFBoolean.TRUE);
		// conVO.setIspumeasdoc(UFBoolean.TRUE);
		// conVO.setIsretailmeasdoc(UFBoolean.TRUE);
		// conVO.setIssalemeasdoc(UFBoolean.TRUE);
		// conVO.setIsstockmeasdoc(UFBoolean.TRUE);
		// 系统导入的都没有辅计量，所以自动增加的也不设置辅计量
		// maVO.setMaterialconvert(new MaterialConvertVO[]{conVO});
		// MaterialVO returnVO = maservice.insertMaterial(maVO);

		return maservice.insertMaterial(maVO);
	}

	/**
	 * 自动分配物料
	 * 
	 * @author ljf
	 */
	@SuppressWarnings("unchecked")
	private void autoMaterialAssign(List<String> maPkList)
			throws BusinessException {
		String sql = "select pk_org from org_orgs where pk_group <> pk_org and (orgtype43='Y' or isbusinessunit ='Y' or orgtype19='Y' ) and (enablestate = 2) and pk_group = '0001N610000000000IT0'";

		List<String> orglist = (List<String>) getQueryBS().executeQuery(sql,
				new ColumnListProcessor());
		if (orglist == null || orglist.size() == 0) {
			return;
		}
		getAssignService().assignMaterialByPks(
				maPkList.toArray(new String[maPkList.size()]),
				orglist.toArray(new String[orglist.size()]), null);
	}

	/**
	 * 
	 * @author zjf 根据参数值获取物料分类编码
	 * @throws BusinessException
	 */
	public String getMarbasclasscode() throws BusinessException {
		SysInitVO initVO = null;
		String pk_org = "GLOBLE00000000000000";// 全局参数组织主键

		initVO = SysInitQuery.querySysinitVO(pk_org, "GFCGJH001");// 获取业务参数方法（组织主键，参数编码）
		String code = initVO.getValue();// 获取参数值(物料分类编码)

		return code;

	}

	private IMaterialAssignService getAssignService() {
		return NCLocator.getInstance().lookup(IMaterialAssignService.class);
	}

	private IUAPQueryBS getQueryBS() {
		return NCLocator.getInstance().lookup(IUAPQueryBS.class);
	}

	/**
	 * 自动启用成本信息批次核算
	 * 
	 * @author ljf
	 * @throws MetaDataException
	 */
	@SuppressWarnings("unchecked")
	private void autoEnableBatch(List<String> maPkList)
			throws BusinessException {
		SqlBuilder sql = new SqlBuilder();
		sql.append(MaterialCostmodeVO.PK_MATERIAL,
				maPkList.toArray(new String[maPkList.size()]));

		List<MaterialCostmodeVO> costmodevolist = (List<MaterialCostmodeVO>) getMDQueryService()
				.queryBillOfVOByCond(MaterialCostmodeVO.class, sql.toString(),
						false);
		if (costmodevolist == null || costmodevolist.size() == 0) {
			return;
		}

		for (int i = 0; i < costmodevolist.size(); i++) {
			MaterialCostmodeVO costmodevo = costmodevolist.get(i);
			costmodevo.setBatchcost(UFBoolean.TRUE);
		}

		HYPubBO_Client.updateAry(costmodevolist
				.toArray(new MaterialCostmodeVO[costmodevolist.size()]));
	}

	/**
	 * 自动启用库存信息批次管理
	 * 
	 * @author ljf
	 * @throws BusinessException
	 */
	@SuppressWarnings("unchecked")
	private void autoEnableStock(List<String> maPkList)
			throws BusinessException {
		String orgsql = "select pk_org from org_orgs where pk_group <> pk_org and (orgtype43='Y' or isbusinessunit ='Y' or orgtype19='Y' ) and (enablestate = 2) and pk_group = '0001N610000000000IT0'";

		List<String> orglist = (List<String>) getQueryBS().executeQuery(orgsql,
				new ColumnListProcessor());
		if (orglist == null || orglist.size() == 0) {
			return;
		}

		IMaterialStockService stockservice = NCLocator.getInstance().lookup(
				IMaterialStockService.class);

		SqlBuilder querysql = new SqlBuilder();
		querysql.append(MaterialStockVO.PK_MATERIAL,
				maPkList.toArray(new String[maPkList.size()]));
		List<MaterialStockVO> stockvolist = (List<MaterialStockVO>) getMDQueryService()
				.queryBillOfVOByCond(MaterialStockVO.class,
						querysql.toString(), false);
		if (stockvolist == null || stockvolist.size() == 0) {
			return;
		}

		for (int i = 0; i < stockvolist.size(); i++) {
			MaterialStockVO stockvo = stockvolist.get(i);
			stockvo.setWholemanaflag(UFBoolean.TRUE);
		}

		stockservice.updateMaterialStockVOs(stockvolist
				.toArray(new MaterialStockVO[stockvolist.size()]));
	}

	private IMDPersistenceQueryService getMDQueryService() {
		return MDPersistenceService.lookupPersistenceQueryService();
	}
	
	private PfButtonClickContext createPfButtonClickContext() {
		PfButtonClickContext context = new PfButtonClickContext();
		context.setParent(this.getModel().getContext().getEntranceUI());
		context.setSrcBillType(this.getSourceBillType());
		context.setPk_group(this.getModel().getContext().getPk_group());
		context.setUserId(this.getModel().getContext().getPk_loginUser());
		// 如果该节点是由交易类型发布的，那么这个参数应该传交易类型，否则传单据类型
		// 如果该节点是由交易类型发布的，那么这个参数应该传交易类型，否则传单据类型
		String vtrantype = TrantypeFuncUtils.getTrantype(this.getModel()
				.getContext());
		// if (StringUtil.isEmptyWithTrim(vtrantype)) {
		// context.setCurrBilltype(POBillType.PrayBill.getCode());
		// }
		// else {
		// }
		context.setCurrBilltype("20");
		context.setUserObj(null);
		context.setSrcBillId(null);
		context.setBusiTypes(this.getBusitypes());
		// 上面的参数在原来调用的方法中都有涉及，只不过封成了一个整结构，下面两个参数是新加的参数
		// 上游的交易类型集合
		context.setTransTypes(this.getTranstypes());
		// 标志在交换根据目的交易类型分组时，查找目的交易类型的依据，有三个可设置值：1（根据接口定义）、
		// 2（根据流程配置）、-1（不根据交易类型分组）
		context.setClassifyMode(PfButtonClickContext.ClassifyByItfdef);
		return context;
	}

}
