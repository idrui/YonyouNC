package nc.vo.pu.costfactor.entity;

import nc.vo.pu.pub.constant.PUEntity;
import nc.vo.pub.IVOMeta;
import nc.vo.pub.SuperVO;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pubapp.pattern.model.meta.entity.vo.VOMetaFactory;

/**
 * 功能说明: 基于SmartVO的业务VO.成本要素表体,
 * 调试时可以使用nc.vo.scm.bd.SmartVODataUtils.expose()展示其数据。 Generated By CodeSeed 3.1
 * 修改记录： 修改人, 日期, 说明
 */

public class CostfactorItemVO extends SuperVO {

  /** 是否显示 **/
  public static final String BSHOW = "bshow";

  /** 显示顺序 **/
  public static final String ISHOWORDER = "ishoworder";

  /** 对应的核算要素 */
  public static final String PK_ACCOUNTFACTOR = "pk_accountfactor";

  /** 采购成本要素_主键 **/
  public static final String PK_COSTFACTOR = "pk_costfactor";

  /** 成本要素行ID **/
  public static final String PK_COSTFACTOR_B = "pk_costfactor_b";

  /** 费用物料ID **/
  public static final String PK_MATERIAL = "pk_material";

  /** 物料(OID) **/
  public static final String PK_SRCMATERIAL = "pk_srcmaterial";

  /** 时间戳 **/
  public static final String TS = "ts";

  /**
   * serialVersionUID
   */
  private static final long serialVersionUID = 4212373380786037668L;

  // wuxla V61
  // /** 费用项对应的默认税率 **/
  // private UFDouble nmartaxrate;

  /** 是否显示 **/
  public UFBoolean getBshow() {
    return (UFBoolean) this.getAttributeValue(CostfactorItemVO.BSHOW);
  }

  /** 显示顺序 **/
  public Integer getIshoworder() {
    return (Integer) this.getAttributeValue(CostfactorItemVO.ISHOWORDER);
  }

  @Override
  public IVOMeta getMetaData() {
    IVOMeta meta = VOMetaFactory.getInstance().getVOMeta(PUEntity.COSTFACTOR_B);
    return meta;
  }

  // /** 费用项对应的默认税率 **/
  // public UFDouble getNmartaxrate() {
  // return this.nmartaxrate;
  // }

  /** 对应的核算要素 getter 方法 */
  public String getPk_accountfactor() {
    return (String) this.getAttributeValue(CostfactorItemVO.PK_ACCOUNTFACTOR);
  }

  /** 采购成本要素_主键 **/
  public String getPk_costfactor() {
    return (String) this.getAttributeValue(CostfactorItemVO.PK_COSTFACTOR);
  }

  /** 成本要素行ID **/
  public String getPk_costfactor_b() {
    return (String) this.getAttributeValue(CostfactorItemVO.PK_COSTFACTOR_B);
  }

  /** 费用物料ID **/
  public String getPk_material() {
    return (String) this.getAttributeValue(CostfactorItemVO.PK_MATERIAL);
  }

  /** 物料(OID) **/
  public String getPk_srcmaterial() {
    return (String) this.getAttributeValue(CostfactorItemVO.PK_SRCMATERIAL);
  }

  /** 时间戳 **/
  public UFDateTime getTs() {
    return (UFDateTime) this.getAttributeValue(CostfactorItemVO.TS);
  }

  /** 是否显示 **/
  public void setBshow(UFBoolean bshow) {
    this.setAttributeValue(CostfactorItemVO.BSHOW, bshow);
  }

  /** 显示顺序 **/
  public void setIshoworder(Integer ishoworder) {
    this.setAttributeValue(CostfactorItemVO.ISHOWORDER, ishoworder);
  }

  // /** 费用项对应的默认税率 **/
  // public void setNmartaxrate(UFDouble nmartaxrate) {
  // this.nmartaxrate = nmartaxrate;
  // }

  /** 对应的核算要素 setter 方法 */
  public void setPk_accountfactor(String pk_accountfactor) {
    this.setAttributeValue(CostfactorItemVO.PK_ACCOUNTFACTOR, pk_accountfactor);
  }

  /** 采购成本要素_主键 **/
  public void setPk_costfactor(String pk_costfactor) {
    this.setAttributeValue(CostfactorItemVO.PK_COSTFACTOR, pk_costfactor);
  }

  /** 成本要素行ID **/
  public void setPk_costfactor_b(String pk_costfactor_b) {
    this.setAttributeValue(CostfactorItemVO.PK_COSTFACTOR_B, pk_costfactor_b);
  }

  /** 费用物料ID **/
  public void setPk_material(String pk_material) {
    this.setAttributeValue(CostfactorItemVO.PK_MATERIAL, pk_material);
  }

  /** 物料(OID) **/
  public void setPk_srcmaterial(String pk_srcmaterial) {
    this.setAttributeValue(CostfactorItemVO.PK_SRCMATERIAL, pk_srcmaterial);
  }

  /** 时间戳 **/
  public void setTs(UFDateTime ts) {
    this.setAttributeValue(CostfactorItemVO.TS, ts);
  }
}
